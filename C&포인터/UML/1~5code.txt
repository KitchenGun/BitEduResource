
====================================================1.
#include<iostream>
using namespace std;


class Human
{
private:
	char name[20];
public:
	Human(const char* _name)
	{
		strcpy_s(name, sizeof(name), _name);
	}
public:
	virtual void Intro()
	{
		cout << name << "\t";
	}
};

class Student :public Human
{
private:
	int number;
public:
	Student(const char* _name,int _number):Human(_name)
	{
		number = _number;
	}
public:
	void Intro()
	{
		Human::Intro();
		cout << number << "\t";
	}
};


int main()
{
	Human H("김사람");
	Student S("이학생", 1234567);

	Human* pH;
	Student* pS;

	pH = &H;
	pS = &S;

	pH->Intro();		// 개인 정보 출력
	pS->Intro();		// 개인 정보 출력
	
	return 0;
}
====================================================2.
#include<iostream>
using namespace std;


class Date
{
private:
	int year, month, day;
public:
	Date(int _year, int _month, int _day) 
	{
		year = _year;
		month = _month;
		day = _day;
	}
public:
	void OutNow()
	{
		cout << year << "-" << month << "-" << day << "\t";
	}
};

class Time
{
private:
	int hour, min, sec;
public:
	Time(int _hour, int _min, int _sec)
	{
		hour = _hour;
		min = _min;
		sec = _sec;
	}
	void OutNow()
	{
		cout << hour << ":" << min << ":" << sec << "\t";
	}
};


class Now:public Date,public Time
{
public:
	Now(int _year, int _month, int _day, int _hour, int _min, int _sec) :Date(_year, _month, _day), Time(_hour, _min, _sec)
	{

	}
public:
	void OutNow()
	{
		Date::OutNow();
		Time::OutNow();
	}
};

int main()
{
	Now N(2009, 5, 10, 12, 30, 58);
	N.OutNow();		// 날짜 시간 출력 ex)"2020-05-22 09:10:25"
	return 0;
}

====================================================3.
#include<iostream>
using namespace std;

class Date
{
private:
	int year, month, day;
public:
	Date(int _year, int _month, int _day)
	{
		year = _year;
		month = _month;
		day = _day;
	}
public:
	void OutNow()
	{
		cout << year << "-" << month << "-" << day << "\t";
	}
};


class Product
{
private:
	char company[20];
	char product[20];
	int price;
	Date* pdate;
public:
	Product(const char* _company, const char* _product,int _year,int _month,int _day,int _price)
	{
		pdate = new Date(_year, _month, _day);
		strcpy_s(company, sizeof(company), _company);
		strcpy_s(product, sizeof(product), _product);
		price = _price;
	}
public:
	void OutProduct()
	{
		cout << company << " " << product << " ";
		pdate->OutNow();
		cout << price << " ";
	}
};

int main()
{
	Product S("새우깡", "농심", 2009, 8, 15, 900);
	S.OutProduct();                   //제품의 모든 정보 출력
	return 0;
}
====================================================4.
#include<iostream>
using namespace std;

class Graphic
{
public:
	virtual void Draw()
	{
		cout << "Graphic\t";
	}
};

class Line : public Graphic
{
public:
	void Draw()
	{
		cout << "Line\t";
	}
};

class Circle : public Graphic
{
public:
	void Draw()
	{
		cout << "Circle\t";
	}
};

class Rect : public Graphic
{
public:
	void Draw()
	{
		cout << "Rect\t";
	}
};



void main()
{
	Graphic* ar[10] = {
		 new Graphic(),new Rect(),new Circle(),new Rect(),new Line(),
		 new Line(),new Rect(),new Line(),new Graphic(),new Circle() };

	int i;

	for (i = 0; i < 10; i++) {
		ar[i]->Draw();	// 해당 도형명을 출력 ex) "Line" or "Circle" or "Rect"
	}

	for (i = 0; i < 10; i++) {
		delete ar[i];
	}
}
====================================================5.
#include<iostream>

using namespace std;

class Human
{
private:
	char name[20];
public:
	Human(const char* _name)
	{
		strcpy_s(name, sizeof(name), _name);
	}
public:
	virtual void Intro()
	{
		cout << name << "\t";
	}
	virtual void Think()
	{
		cout << "부모의 입장에서 생각" << endl;
	}
};

class Student :public Human
{
private:
	int number;
public:
	Student(const char* _name, int _number) :Human(_name)
	{
		number = _number;
	}
public:
	void Intro()
	{
		Human::Intro();
		cout << number << endl;
	}
	void Think()
	{
		cout << "자식의 입장에서 생각" << endl;
	}
	void Study()
	{
		cout << "공부를 합니다" << endl;
	}
};

void main()
{
	Student K("홍길동", 9506299);
	K.Intro();		//이름과 학번 출력
	K.Think();		// 부모의 함수를 재정의
		   //부모의 Think() : "부모의 입장에서 생각" 문자열 출력
		   //자식의 Think() : "자식의 입장에서 생각" 문자열 출력
	K.Study();		// 자식만 가지고 있는 함수
					// "공부를 합니다" 문자열 출력
}
